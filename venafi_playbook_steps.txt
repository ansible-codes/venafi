
# Ansible Playbook for Venafi Certificates

This document provides instructions and an example Ansible playbook for requesting and managing certificates from Venafi using Ansible.

## Playbook Overview

The playbook performs the following tasks:
1. Generates a private key.
2. Generates a CSR (Certificate Signing Request) for each required certificate.
3. Requests the certificates from Venafi using the CSR.
4. Retrieves and optionally installs the certificates on the target server.

## Pre-requisites

- Ansible installed on your system.
- Venafi Ansible role or collection installed.
- Access to Venafi platform with valid credentials.
- Ansible Vault set up for storing sensitive information like Venafi token and PFX password.

## Playbook Example

```yaml
- hosts: localhost
  vars:
    common_name: www.example.com
    certificate_crt_path: /path/to/certificate.crt
    certificate_key_path: /path/to/certificate.key
    pfx_path: /path/to/griffin-uat4.bankofamerica.com.pfx

  vars_files:
    - vault.yml

  tasks:
    - name: Generate Private Key
      openssl_privatekey:
        path: "{{ certificate_key_path }}"

    - name: Generate CSR for certificate.crt
      openssl_csr:
        path: /path/to/csr_certificate.pem
        privatekey_path: "{{ certificate_key_path }}"
        common_name: "{{ common_name }}"

    - name: Request certificate.crt from Venafi
      venafi_certificate:
        api_endpoint: "{{ venafi_api_endpoint }}"
        token: "{{ venafi_token }}"
        csr_path: /path/to/csr_certificate.pem
        cert_path: "{{ certificate_crt_path }}"
        chain_option: first
      register: venafi_certificate_output

    - name: Generate CSR for griffin-uat4.bankofamerica.com.pfx
      openssl_csr:
        path: /path/to/csr_pfx.pem
        privatekey_path: "{{ certificate_key_path }}"
        common_name: "griffin-uat4.bankofamerica.com"

    - name: Request griffin-uat4.bankofamerica.com.pfx from Venafi
      venafi_certificate:
        api_endpoint: "{{ venafi_api_endpoint }}"
        token: "{{ venafi_token }}"
        csr_path: /path/to/csr_pfx.pem
        cert_path: "{{ pfx_path }}"
        cert_format: pfx
        pfx_password: "{{ pfx_password }}"
        chain_option: first
```

## Vault File Setup

Create a `vault.yml` file containing encrypted variables:

```yaml
venafi_api_endpoint: https://venafi.example.com/
venafi_token: ENCRYPTED_VENAFI_API_TOKEN
pfx_password: ENCRYPTED_PFX_PASSWORD
```

Use `ansible-vault create vault.yml` to create and `ansible-vault edit vault.yml` to edit this file.

## Running the Playbook

Run the playbook with:

```bash
ansible-playbook your_playbook.yml --ask-vault-pass
```

or use a vault password file:

```bash
ansible-playbook your_playbook.yml --vault-password-file /path/to/vault_password_file
```

Replace `your_playbook.yml` with your playbook file name and provide the correct vault password or file path.
